pipeline {
  agent any

  tools {
    nodejs 'NodeJS'
  }

  stages {
    stage('Git') {
      steps {
        // Clone the repository into a specific directory
        git url: 'https://github.com/KelySaina/nodeJenkins', branch: 'main'
      }
    }

    stage('Build & Test') {
      steps {
        script {
          // Install dependencies
          sh 'npm install'

          sh 'npm test'

          // Check for and terminate background jobs
          //sh 'if [ -n "$(jobs -p)" ]; then kill %%; fi'

          // Start your Node.js application in the background
          //sh 'npm run build'
        }
      }
    }

    stage('Deploy to server') {
            steps {
                script {
                    // This stage executes an Ansible playbook
                    def ansibleHome = tool 'ansible'
                    withEnv(["PATH+ANSIBLE=${ansibleHome}/bin"]) {
                        sh 'ansible-playbook -i inventory.ini playbook.yml'
                    }
                }
            }
        }
  }
  post {
    failure {
       //emailext body:'$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS.Check console output at $BUILD_URL/console to view the results.', recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject:'$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!'
        emailext body:'$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS.Check console output at $BUILD_URL/console to view the results.', to: 'kelysaina@gmail.com', from:'nalyvalisoa0510@gmail.com', subject:'$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!'
    }
    success{
        script {
            // This stage executes an Ansible playbook
            def ansibleHome = tool 'ansible'
            withEnv(["PATH+ANSIBLE=${ansibleHome}/bin"]) {
                sh 'ansible-playbook -i inventory.ini get_url.yml'
                
            try{
                // Get the raw build object
                def build = currentBuild.rawBuild
                
                // Retrieve the console output dynamically
                def consoleOutput = build.getLog(Integer.MAX_VALUE)
    
                // Define a regular expression pattern to match the URL
                def pattern = /URL: (https?:\/\/[^\s]+)/
    
                // Find the first match in the console output
                def matcher = (consoleOutput =~ pattern)
                
    
                if (matcher) {
                    def url = matcher[0][1]
                    echo "Extracted URL: ${url}"
    
                    //emailext body:'Find ${JOB_NAME} latest version at '+url, recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject:'Build success for ${JOB_NAME}'
                    emailext body:'Find ${JOB_NAME} latest version at '+url, to: "kelysaina@gmail.com", from:"nalyvalisoa0510@gmail.com", subject:'Build success for ${JOB_NAME}'
                    
                } else {
                    echo "URL not found in console output"
                }
            }catch(Exception e){
                //echo ${e.message}
            }
        }
        }
    }
    
}

}